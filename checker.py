import requests
from bs4 import BeautifulSoup
import time
import logging
from datetime import datetime
import os
from dotenv import load_dotenv
from collections import defaultdict
import pytz  # <-- –ù–û–í–ê–Ø –ë–ò–ë–õ–ò–û–¢–ï–ö–ê –î–õ–Ø –ß–ê–°–û–í–´–• –ü–û–Ø–°–û–í

# --- –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –ò–ó –§–ê–ô–õ–ê .env ---
load_dotenv()

# --- 1. –ì–õ–ê–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ---

# –í–∞—à–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ .env
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_IDS_STR = os.getenv("TELEGRAM_CHAT_IDS", "")
TELEGRAM_CHAT_IDS = TELEGRAM_CHAT_IDS_STR.split(',') if TELEGRAM_CHAT_IDS_STR else []

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—Ç—ã
CHECK_INTERVAL_SECONDS = 3600  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (3600 = 1 —á–∞—Å)
REQUEST_TIMEOUT = 60
DAILY_REPORT_HOUR = 8  # –í 8 —É—Ç—Ä–∞ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
MOSCOW_TZ = pytz.timezone('Europe/Moscow')  # <-- –ß–ê–°–û–í–û–ô –ü–û–Ø–° –ú–û–°–ö–í–´

# --- –ö–û–ù–ö–†–ï–¢–ù–ê–Ø –¶–ï–õ–¨ –ü–û–ò–°–ö–ê ---
DEADLINE_DATE = datetime(2025, 9, 1)

# –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
TARGET_CITIES = [
    {
        "name": "–ê—Å—Ç–∞–Ω–∞",
        "office": "ASTANA",
        "calendar_id": "20213868"
    },
    {
        "name": "–ú–æ—Å–∫–≤–∞",
        "office": "MOSKAU",
        "calendar_id": "40044915"
    }
]

# --- 2. –°–ò–°–¢–ï–ú–ù–ê–Ø –ß–ê–°–¢–¨ (–õ–£–ß–®–ï –ù–ï –¢–†–û–ì–ê–¢–¨) ---

APPOINTMENT_URL = 'https://appointment.bmeia.gv.at/HomeWeb/Scheduler'
HEADERS = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Language': 'ru-RU,ru;q=0.9', 'Origin': 'https://appointment.bmeia.gv.at', 'Referer': 'https://appointment.bmeia.gv.at/HomeWeb/Scheduler'}
logging.basicConfig(level=logging.INFO, format='%(asctime)s - [%(levelname)s] - %(message)s', handlers=[logging.FileHandler("checker.log", encoding='utf-8'), logging.StreamHandler()])

# --- –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö ---
# –î–ª—è —Å—Ä–æ—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
REPORTED_URGENT_DATES = set()
# –î–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (–≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∞—Ç)
ALL_AVAILABLE_DATES = set()


def send_telegram_notification(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API."""
    if not TELEGRAM_CHAT_IDS or not TELEGRAM_BOT_TOKEN:
        logging.warning("–¢–æ–∫–µ–Ω –∏–ª–∏ Chat ID –¥–ª—è Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
        return
    api_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    for chat_id in TELEGRAM_CHAT_IDS:
        if not chat_id: continue
        payload = {'chat_id': chat_id.strip(), 'text': message, 'parse_mode': 'Markdown'}
        try:
            response = requests.post(api_url, json=payload, timeout=10)
            if response.status_code == 200: logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ Chat ID: {chat_id}.")
            else: logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ Chat ID {chat_id}: {response.status_code}, {response.text}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API: {e}")

def update_and_check_dates(session):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∞—Ç—ã, –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ—Ç –ª–∏ –Ω–æ–≤—ã—Ö —Å—Ä–æ—á–Ω—ã—Ö –¥–∞—Ç.
    """
    global REPORTED_URGENT_DATES, ALL_AVAILABLE_DATES
    logging.info("--- –ù–∞—á–∏–Ω–∞—é –ø–ª–∞–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞—Ç ---")
    
    current_dates_this_cycle = set()
    
    for city in TARGET_CITIES:
        form_data = {'Language': 'ru', 'Office': city['office'], 'CalendarId': city['calendar_id'], 'PersonCount': '1', 'Monday': '', 'Command': ''}
        try:
            response = session.post(APPOINTMENT_URL, data=form_data, headers=HEADERS, timeout=REQUEST_TIMEOUT)
            response.raise_for_status()
            soup = BeautifulSoup(response.text, 'html.parser')
            date_headers = soup.find_all('th')

            for header in date_headers:
                date_text = header.get_text(strip=True)
                if not date_text: continue
                
                try:
                    date_part = date_text.split(',')[-1].strip()
                    appointment_date = datetime.strptime(date_part, "%d.%m.%Y")
                    
                    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç—å (–¥–æ 1 —Å–µ–Ω—Ç—è–±—Ä—è)
                    if appointment_date < DEADLINE_DATE and date_text not in REPORTED_URGENT_DATES:
                        logging.critical(f"!!! –ù–ê–ô–î–ï–ù–ê –ù–û–í–ê–Ø –¶–ï–õ–ï–í–ê–Ø –î–ê–¢–ê: {date_text} –≤ –≥. {city['name']} !!!")
                        message = (f"üö® *–ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ –¥–æ 1 —Å–µ–Ω—Ç—è–±—Ä—è!* üö®\n\n"
                                   f"üìç –ì–æ—Ä–æ–¥: *{city['name']}*\n"
                                   f"üóìÔ∏è –î–∞—Ç–∞: `{date_text}`")
                        send_telegram_notification(message)
                        REPORTED_URGENT_DATES.add(date_text)
                    
                    # 2. –î–æ–±–∞–≤–ª—è–µ–º –õ–Æ–ë–£–Æ –Ω–∞–π–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç—á–µ—Ç–∞
                    current_dates_this_cycle.add((city['name'], appointment_date, date_text))
                        
                except (ValueError, IndexError):
                    continue
        except requests.exceptions.RequestException as e:
            logging.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥. {city['name']}. –ü—Ä–æ–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–∏—Ö –¥–∞—Ç.")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–∞–Ω–Ω—ã–µ
            return 
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç
    ALL_AVAILABLE_DATES = current_dates_this_cycle
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –¥–∞—Ç: {len(ALL_AVAILABLE_DATES)}.")


def send_daily_summary():
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É –æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç–∞—Ö."""
    logging.info("--- –§–æ—Ä–º–∏—Ä—É—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç... ---")

    if not ALL_AVAILABLE_DATES:
        message = f"üìä *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç ({DAILY_REPORT_HOUR}:00 –ú–°–ö)*\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    else:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞—Ç—ã –ø–æ –≥–æ—Ä–æ–¥–∞–º
        dates_by_city = defaultdict(list)
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–∞—Ç—ã –æ—Ç –±–ª–∏–∂–∞–π—à–µ–π –∫ –¥–∞–ª—å–Ω–µ–π
        for city_name, _, date_str in sorted(list(ALL_AVAILABLE_DATES), key=lambda x: x[1]):
            dates_by_city[city_name].append(f"  - `{date_str}`")
        
        message_parts = [f"üìä *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç–∞—Ö ({DAILY_REPORT_HOUR}:00 –ú–°–ö)*\n"]
        for city, date_strings in dates_by_city.items():
            message_parts.append(f"*{city.upper()}:*")
            message_parts.extend(date_strings)
        
        message = "\n".join(message_parts)
    
    send_telegram_notification(message)


def run_production_mode(session):
    """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ -> –ø–∞—É–∑–∞ -> –ø—Ä–æ–≤–µ—Ä–∫–∞."""
    last_report_day = -1
    
    try:
        # --- –ü–ï–†–í–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–†–ê–ó–£ –ü–†–ò –ó–ê–ü–£–°–ö–ï ---
        update_and_check_dates(session)

        while True:
            now_moscow = datetime.now(MOSCOW_TZ)
            
            # --- –ü–†–û–í–ï–†–ö–ê –£–°–õ–û–í–ò–Ø –î–õ–Ø –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –û–¢–ß–ï–¢–ê ---
            if now_moscow.hour == DAILY_REPORT_HOUR and now_moscow.day != last_report_day:
                send_daily_summary()
                last_report_day = now_moscow.day

            # --- –ü–ê–£–ó–ê ---
            logging.info(f"–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CHECK_INTERVAL_SECONDS / 60:.0f} –º–∏–Ω—É—Ç.")
            time.sleep(CHECK_INTERVAL_SECONDS)
            
            # --- –ü–õ–ê–ù–û–í–ê–Ø –ï–ñ–ï–ß–ê–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ---
            update_and_check_dates(session)
            
    finally:
        send_telegram_notification("‚èπÔ∏è *–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*.")


if __name__ == "__main__":
    try:
        with requests.Session() as s:
            logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏...")
            s.get(APPOINTMENT_URL, headers=HEADERS, timeout=REQUEST_TIMEOUT)
            
            send_telegram_notification(f"‚úÖ *–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.*\n- –°—Ä–æ—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –¥–∞—Ç—ã –¥–æ 01.09.2025\n- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç: –≤ {DAILY_REPORT_HOUR}:00 –ø–æ –ú–°–ö")
            run_production_mode(s)

    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        error_message = f"‚ùå *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!* –ë–æ—Ç –∞–≤–∞—Ä–∏–π–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.\n\n*–û—à–∏–±–∫–∞:* `{e}`"
        send_telegram_notification(error_message)