import requests
from bs4 import BeautifulSoup
import time
import logging
import argparse
from datetime import datetime, time as dt_time
import os
from dotenv import load_dotenv

# --- –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –ò–ó –§–ê–ô–õ–ê .env ---
load_dotenv()

# --- 1. –ì–õ–ê–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò (–ó–î–ï–°–¨ –ú–û–ñ–ù–û –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨) ---

# –í–∞—à–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫—Ä–∏–ø—Ç –±–µ—Ä–µ—Ç –∏–∑ —Ñ–∞–π–ª–∞ .env
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_IDS_STR = os.getenv("TELEGRAM_CHAT_IDS", "")
TELEGRAM_CHAT_IDS = TELEGRAM_CHAT_IDS_STR.split(',') if TELEGRAM_CHAT_IDS_STR else []

# –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—Ç—ã
CHECK_INTERVAL_SECONDS = 3600 # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (3600 = 1 —á–∞—Å)
REQUEST_TIMEOUT = 60
DAILY_REPORT_HOUR = 11 # –í 11 —á–∞—Å–æ–≤ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç

# –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ)
TARGET_CITIES = [
    {
        "name": "–ê—Å—Ç–∞–Ω–∞",
        "office": "ASTANA",
        "calendar_id": "20213868"
    },
    {
        "name": "–ú–æ—Å–∫–≤–∞",
        "office": "MOSKAU",
        "calendar_id": "40044915"
    }
]

# –°–ø–∏—Å–æ–∫ –°–†–û–ß–ù–´–• –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ (–±–æ—Ç –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –õ–Æ–ë–û–ú–£ –∏–∑ –Ω–∏—Ö)
URGENT_CRITERIA = [
    {"type": "deadline", "value": datetime(2025, 9, 1), "message": "–ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ –¥–æ 1 —Å–µ–Ω—Ç—è–±—Ä—è"},
    {"type": "deadline", "value": datetime(2025, 9, 20), "message": "–ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ –¥–æ 20 —Å–µ–Ω—Ç—è–±—Ä—è"},
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞:
    # {"type": "month", "value": ".08.", "message": "–ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ –≤ –∞–≤–≥—É—Å—Ç–µ"}
]


# --- 2. –°–ò–°–¢–ï–ú–ù–ê–Ø –ß–ê–°–¢–¨ (–õ–£–ß–®–ï –ù–ï –¢–†–û–ì–ê–¢–¨) ---

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
APPOINTMENT_URL = 'https://appointment.bmeia.gv.at/HomeWeb/Scheduler'
HEADERS = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Language': 'ru-RU,ru;q=0.9', 'Origin': 'https://appointment.bmeia.gv.at', 'Referer': 'https://appointment.bmeia.gv.at/HomeWeb/Scheduler'}
logging.basicConfig(level=logging.INFO, format='%(asctime)s - [%(levelname)s] - %(message)s', handlers=[logging.FileHandler("checker.log", encoding='utf-8'), logging.StreamHandler()])


def send_telegram_notification(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API –∫–∞–∂–¥–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é –∏–∑ —Å–ø–∏—Å–∫–∞."""
    if not TELEGRAM_CHAT_IDS or not TELEGRAM_BOT_TOKEN:
        logging.warning("–¢–æ–∫–µ–Ω –∏–ª–∏ Chat ID –¥–ª—è Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
        return
    api_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    for chat_id in TELEGRAM_CHAT_IDS:
        if not chat_id: continue
        payload = {'chat_id': chat_id.strip(), 'text': message, 'parse_mode': 'Markdown'}
        try:
            response = requests.post(api_url, json=payload, timeout=10)
            if response.status_code == 200: logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ Chat ID: {chat_id}.")
            else: logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ Chat ID {chat_id}: {response.status_code}, {response.text}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API: {e}")


def send_urgent_alert(message, city_name, reason):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ä–æ—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –¥–∞—Ç–µ."""
    full_message = f"üö® *–°–†–û–ß–ù–û: –ù–ê–ô–î–ï–ù–ê –î–ê–¢–ê –≤ –≥. {city_name.upper()}!* üö®\n\n*–ü—Ä–∏—á–∏–Ω–∞:* {reason}\n*–î–µ—Ç–∞–ª–∏:* {message}"
    logging.critical(full_message)
    send_telegram_notification(full_message)


def get_available_dates_for_target(session, target):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞."""
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞: {target['name']}...")
    form_data = {'Language': 'ru', 'Office': target['office'], 'CalendarId': target['calendar_id'], 'PersonCount': '1', 'Monday': '', 'Command': ''}
    dates = []
    try:
        response = session.post(APPOINTMENT_URL, data=form_data, headers=HEADERS, timeout=REQUEST_TIMEOUT)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')
        date_headers = soup.find_all('th')
        for header in date_headers:
            date_text = header.get_text(strip=True)
            if date_text:
                try:
                    date_part = date_text.split(',')[-1].strip()
                    appointment_date = datetime.strptime(date_part, "%d.%m.%Y")
                    dates.append({"city": target['name'], "date_obj": appointment_date, "date_str": date_text})
                except (ValueError, IndexError):
                    continue
    except requests.exceptions.RequestException as e:
        logging.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥. {target['name']}: {e}.")
    return dates


def run_urgent_check(session):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ª—é–±–æ–º—É –∏–∑ —Å—Ä–æ—á–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤."""
    logging.info("--- –ó–∞–ø—É—Å–∫ —Å—Ä–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º ---")
    for city in TARGET_CITIES:
        dates_found = get_available_dates_for_target(session, city)
        for date_data in dates_found:
            date_obj = date_data['date_obj']
            date_str = date_data['date_str']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–∞–∂–¥–æ–º—É —Å—Ä–æ—á–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é
            for criterion in URGENT_CRITERIA:
                match = False
                if criterion['type'] == 'deadline' and date_obj < criterion['value']:
                    match = True
                elif criterion['type'] == 'month' and criterion['value'] in date_str:
                    match = True
                
                if match:
                    send_urgent_alert(date_str, city['name'], criterion['message'])
                    return True # –ù–∞—à–ª–∏, –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∞—Ç—å —Ä–∞–±–æ—Ç—É –≤—Å–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
    logging.info("–°—Ä–æ—á–Ω—ã—Ö –¥–∞—Ç –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    return False


def run_daily_report(session):
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞—Ç—ã —Å–æ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ –±–ª–∏–∂–∞–π—à–µ–π."""
    logging.info("--- –ó–ê–ü–£–°–ö –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –û–¢–ß–ï–¢–ê ---")
    all_dates = []
    for city in TARGET_CITIES:
        all_dates.extend(get_available_dates_for_target(session, city))
    
    if not all_dates:
        message = "üìä *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç*\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç –≤ –ê—Å—Ç–∞–Ω–µ –∏ –ú–æ—Å–∫–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        logging.info("–û—Ç—á–µ—Ç: —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç –Ω–µ—Ç.")
    else:
        closest_date_data = min(all_dates, key=lambda x: x['date_obj'])
        city_name = closest_date_data['city']
        date_str = closest_date_data['date_str']
        message = f"üìä *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç*\n\n–ë–ª–∏–∂–∞–π—à–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –¥–∞—Ç–∞: *{date_str}* (–≥. {city_name})."
        logging.info(f"–û—Ç—á–µ—Ç: –±–ª–∏–∂–∞–π—à–∞—è –¥–∞—Ç–∞ {date_str} –≤ –≥. {city_name}.")
    
    send_telegram_notification(message)


def run_production_mode():
    """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    logging.info("--- –ó–ê–ü–£–°–ö –ë–û–¢–ê –í –†–ê–ë–û–ß–ï–ú –†–ï–ñ–ò–ú–ï ---")
    last_report_day = -1
    with requests.Session() as session:
        try:
            logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏..."); session.get(APPOINTMENT_URL, headers=HEADERS, timeout=REQUEST_TIMEOUT); logging.info("–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        except requests.exceptions.RequestException as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é: {e}."); return
        
        while True:
            now = datetime.now()
            if now.hour == DAILY_REPORT_HOUR and now.day != last_report_day:
                run_daily_report(session)
                last_report_day = now.day

            if run_urgent_check(session):
                logging.info("–°—Ä–æ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞! –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É."); break
            
            logging.info(f"–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CHECK_INTERVAL_SECONDS / 3600} —á–∞—Å(–∞)."); time.sleep(CHECK_INTERVAL_SECONDS)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–∏–∑–æ–≤—ã—Ö –¥–∞—Ç.")
    parser.add_argument('--force-report', action='store_true', help='–¢–ï–°–¢: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç.')
    parser.add_argument('--run', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ —Ä–∞–±–æ—á–µ–º —Ä–µ–∂–∏–º–µ (—Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).')
    args = parser.parse_args()

    if args.force_report:
        with requests.Session() as s:
            try:
                s.get(APPOINTMENT_URL, headers=HEADERS, timeout=REQUEST_TIMEOUT)
                run_daily_report(s)
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç: {e}")
    else:
        # –õ—é–±–æ–π –∑–∞–ø—É—Å–∫ –±–µ–∑ —Ñ–ª–∞–≥–∞ --force-report –±—É–¥–µ—Ç —Ä–∞–±–æ—á–∏–º
        run_production_mode()